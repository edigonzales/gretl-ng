/*
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://jars.interlis.ch"; allowInsecureProtocol true }
    }
    
    dependencies {
        classpath "io.github.sogis:gretl-ng:latest.integration"
    }
    
}
*/

/*
plugins {
    id 'ch.so.agi.gretl-ng' version 'latest.integration'
}
*/

//apply plugin: "ch.so.agi.gretl-ng"
plugins {
    id 'ch.so.agi.gretl'
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*


def foo = 'a'

def property = objects.property(String)
//def dbProperty = objects.property(Connector)
//property.set("arsch")

tasks.register('fubar') {
    doLast {
        println foo
        foo = 'b'
        println foo
        property.set("lulatsch")
    }
}

/*
task importData() {
    doLast {
        println foo
    }
}
*/

task copyItf1(type: Copy) {
    from '/Users/stefan/Downloads/2524.ch.so.agi.av.dm01_ch_itf/2524.ch.so.agi.av.dm01_ch.itf'
    into '/Users/stefan/Downloads/'
}


task copyItf2(type: Copy) {
    dependsOn 'copyItf1'
    from '/Users/stefan/Downloads/2523.ch.so.agi.av.dm01_ch_itf/2523.ch.so.agi.av.dm01_ch.itf'
    into '/Users/stefan/Downloads/'
}

tasks.register('validateData', IliValidator) {
    dependsOn 'copyItf2'
    models = "SO_AFU_ABBAUSTELLEN_Publikation_20221103"
    //dataFiles = ["/Users/stefan/Downloads/254900.itf"]
    logFile = file("/Users/stefan/Downloads/ilivalidator1.log")
    dataFiles = fileTree("/Users/stefan/Downloads/").matching {
    	include "*.xtf"
    }
}

tasks.register('validateData2', IliValidator) {
    dependsOn 'validateData'
    models = "SO_AFU_ABBAUSTELLEN_Publikation_20221103"
    //dataFiles = ["/Users/stefan/Downloads/254900.itf"]
    logFile = file("/Users/stefan/Downloads/ilivalidator.log")
    dataFiles = fileTree("/Users/stefan/Downloads/").matching {
    	include "*.xtf"
    }
}

tasks.register('importData', Ili2pgImport) {
    //database.uri="jdbc:postgresql://localhost:54321/edit"
    //database.user="gretl"
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    dbschema = "agi_dm01avso24"
    models = "DM01AVSO24LV95"
    dataFile = "/Users/stefan/Downloads/252400.itf"
    //dataFile = fileTree("/Users/stefan/Downloads/itf/.").matching {
    //    include "*.itf"
    //}

    dataset = "2524"
    disableValidation = true
    //datasetSubstring = objects.listProperty(Range).set(0..4)
    //datasetSubstring = 0..4
}

tasks.register('replaceData', Ili2pgReplace) {
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    dbschema = "agi_dm01avso24"
    models = "DM01AVSO24LV95"
    dataFile = "/Users/stefan/Downloads/252400.itf"
    dataFile = fileTree("/Users/stefan/Downloads/itf/.").matching {
        include "*.itf"
    }

    dataset = dataFile
    disableValidation = true
    datasetSubstring = 0..4
}

tasks.register('exportData', Ili2pgExport) {  
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    dbschema = "agi_dm01avso24"
    models = "DM01AVSO24LV95"
    dataFile = "/Users/stefan/Downloads/252400_export.itf"
    //dataset = "2524"
    disableValidation = true
}

tasks.register('deleteData', Ili2pgDelete) {  
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    dbschema = "agi_dm01avso24"
    models = "DM01AVSO24LV95"
    dataset = "2524"
    failOnException = false
}

tasks.register('createSchema', Ili2pgImportSchema) {  
    /*
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    */

    dbschema = "agi_dm01avso24"
    models = "DM01AVSO24LV95"
    defaultSrsCode = "2056"
    createGeomIdx = true
    createFkIdx = true
    createEnumTabs = true
    beautifyEnumDispName = true
    createMetaInfo = true
    createNumChecks = true
    nameByTopic = true
    strokeArcs = true
    createBasketCol = true
    createDatasetCol = true
    createImportTabs = true
    createscript = file("/Users/stefan/Downloads/fubar.sql")
}

tasks.register('transferSomeData', Db2Db) {
    sourceDb {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    targetDb {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    sqlParameters = [mySchema:'agi_dm01avso24']
    transferSets = [
        new TransferSet('foo.sql', 'agi_dm01avso24_sink.fixpunktekatgrie3_lfp3nachfuehrung', true),
    ];
}

tasks.register('executeSomeSql', SqlExecutor) {
    database {
        uri = "jdbc:postgresql://localhost:54321/edit"
        user = "gretl"
        password = "gretl"
    }
    sqlFiles = ['demo.sql']
}

tasks.register('downloadFileFromS3', S3Download) {
    accessKey = "xxx"
    secretKey = "yyy"
    downloadDir = file(".")
    bucketName = "ch.so.agi.geodata"
    key = "ch.so.agi.av_gb_administrative_einteilungen_xtf.zip"
    //endPoint = "https://s3.eu-central-1.amazonaws.com" 
    //region = "eu-central-1"

}